#!/usr/bin/env php
<?php

$path = getcwd();

$apiFile = $path.'/api.json';

if ($t = _ARGV('path')) {
    $path = $t;
} elseif ($t = _ARGV('p')) {
    $path = $t;
}

if ($path{0} != '.' && $path{0} != '/') {
    $path = getcwd().'/'.$path;
}

if ($t = _ARGV('j')) {
    $apiFile = $t;
} elseif ($t = _ARGV('json')) {
    $apiFile = $t;
}

if ($apiFile{0} != '.' && $apiFile{0} != '/') {
    $apiFile = $path.'/'.$apiFile;
}

if (_ARGV('h') || _ARGV('help')) {
    var_dump(_ARGV('h'));
    echo <<<  EOT
BeeGThing: illegal option -- -
usage:  BeeGThing -j|--json=api.json -p|--path=controller

EOT;
exit;
}

define('ROOT_PATH', $path);

if (PHP_SAPI != 'cli') {
    exit('not run in http');
}

if (!file_exists($apiFile)) {
    echo <<<  EOT
BeeGThing: $apiFile not exists
BeeGThing --help for more information

EOT;
exit;
}

$text = file_get_contents($apiFile);

$json = json_decode(preg_replace("%//\s+[^\n]+%", '', $text), true);

foreach ($json['model'] as $key => $value) {
    $t = explode('<', $key);
    $t = array_map('trim', $t);
    if (isset($t[1]) && isset($json['model'][$t[1]])) {
        $json['model'][$t[0]] = array_merge($value, $json['model'][$t[1]]);
    }
}
foreach ($json['controller'] as $key => $value) {
    list($method, $url) = explode(' ', $key);
    $value['method'] = strtolower($method);
    $url = trim($url, '/');
    $json['controller'][$url] = $value;
    unset($json['controller'][$key]);
}

$json['controller'] = getData($json['controller'], $json['model']);

foreach ($json['controller'] as $key => $value) {
    $url = $key;
    if (strpos($url, '/')) {
        $dir = ROOT_PATH.'/'.dirname($url);
    } else {
        $dir = ROOT_PATH;
    }
    $file = ROOT_PATH.'/'.$url.'.php';

    $apiPath = str_replace('/', '_', $url);

    if (!file_exists($dir)) {
        mkdir($dir, 0777, true);
    }

    $result = array();
    if (isset($value['response']['result'])) {
        $result = $value['response']['result'];
    }
    $r = varToString($result, "        ");
    //echo $r;
    //exit;
    
    //$r = var_export($result, true);
    $c = basename($url).'';
    $p = '        $request = array();'."\n";
    foreach ($value['request'] as $k => $v) {
        $k = ltrim($k, '! ');
        if ($k == 'session') {
            continue;
        }
        $p .= "        \$request['{$k}'] = _POST('$k');\n";
    }
$t =  <<<  EOT
<?php

class {$c}Controller extends apiController
{
    function indexAction()
    {
{$p}
        \$response = $r;
        // get data
        \$apiFile = ROOT_PATH.'/api/lib/{$apiPath}.php';
        
        if (file_exists(\$apiFile)) {
            include \$apiFile;
            \$a = new Api();
            \$response = \$a->getData(\$request, \$response, \$this);
        }
        \$this->outPut(\$response);
    }
}

EOT;
    file_put_contents($file, $t);
}

//生成apitest.html
$htmlfile = ROOT_PATH.'/'.'apitest.html';  //html文件存放地址
$rp = ROOT_PATH;			   //接口提交地址
$i = 0;
foreach ($json['controller'] as $key => $value) {
    @$port .= "<option value='{$key}'>$key</option>";
    $j = $i+1;
    @$request .= "<div id='{$j}' style='display:none;' class='parms'><form action='{$i}'><table border='1'>";
    foreach ($value['request'] as $k => $val) {
        @$request .= "<tr><td>$k</td><td>";
        if (is_array($val)) {
            foreach ($val as $ka => $va) {
                @$request .= "$ka:<input type='text' name='{$ka}' value='{$va}' >";
            }
        }else{
            @$request .= "$k:<input type='text' name='{$k}' value='{$val}' >";
        }
        $request .= "</td></tr>";
    }
    $request .= "</table></form></div>";
    $i++;
}
$apiPort = $port;
$apirRequest = $request;

$htmlcont =  <<<  EOT
<html>
<head>
    <meta charset="utf-8">
    <style>
        body{
            font-size: 14px;
            width: 750px;
            margin: 0 auto;
            padding-top: 20px;
            color: #00FF00;
            background-color: black;
        }
        table{
            border-collapse: collapse;
            border-spacing: 0;
            border-color: #808080;
        }
        td{
            padding: 5px;
        }
        input{
            border: 1px solid #808080;
            text-indent: 2px;
            margin-right: 5px;
        }
        select,textarea{
            border: 1px solid #808080;
            background-color: black;
            color: #00FF00;
        }
        .parms_div{
            clear: both;
            width: 100%;
            margin-bottom: 10px;
            overflow: hidden;
        }
        .parms_div button{
            background: #F5F5F1;
            border: 1px solid #808080;
            border-radius: 5px;
            cursor: pointer;
            height: 30px;
            width: 60px;font-size: 14px;
            width: 750px;
            margin: 0 auto;
            padding-top: 0px;
            color: #00FF00;
            background-color: black;
        }
        table{
            border-collapse: collapse;
            border-spacing: 0;
            border-color: #808080;
        }
        td{
            padding: 5px;
        }
        input{
            border: 1px solid #808080;
            text-indent: 2px;
            margin-right: 5px;
        }
        select,textarea{
            border: 1px solid #808080;
            background-color: black;
            color: #00FF00;
        }
        .parms_div{
            clear: both;
            width: 100%;
            margin-bottom: 10px;
            overflow: hidden;
        }
        .parms_div button{
            background: #F5F5F1;
            border: 1px solid #808080;
            border-radius: 5px;
            cursor: pointer;
            height: 30px;
            width: 60px;
            text-align: center;
        }
        .parms_div span{
            float: left;
        }
        .parms_div textarea{
            font-size: 12px;
        }
            text-align: center;
        }
        .parms_div span{
            float: left;
        }
        .parms_div textarea{
            font-size: 12px;
        }
    </style>
    <script type="text/javascript" src="http://code.jquery.com/jquery-2.0.0.min.js"></script>
</head>
<body>
    <div class="parms_div">
        <span>接口名称：</span>
        <select id="apipick" autocomplete="off">
            <option value="" selected>选择接口</option>
                {$apiPort}
        </select>
    </div>

    <div class="parms_div">
        <span>参数：</span>
        {$apirRequest}
    </div>

    <div class="parms_div">
        <button id="send">发送</button>
    </div>
    <div class="parms_div">
        <span>请求返回：</span>
        <textarea id="request" style="width:500px;height:500px;">
        
        </textarea>
    </div>
    <script type="text/javascript" charset="utf-8">
    $(function(){
        $("#apipick").change(function(){
            $("#request").val('');
            var api = $(this).val();
            if (api == '') {
                return false;
            }
            $(".parms").hide();
            var index = $("#apipick :selected").index();
            $("#"+index).show();
        });
        $("#send").click(function(){
            var url;
            var a = $("#apipick :selected").val();
            var b = "{$rp}";
            var parm = {};
            $(".parms :visible tr").each(function(){
                if($(this).find('input').length > 1){
                    name = $(this).find('td:first').text();
                    name = name.toLowerCase();
                    parm[name] = {};
                    $(this).find('input').each(function(){
                        var n = $(this).attr('name');
                        parm[name][n] = $(this).val();
                    });
                } else {
                   var input = $(this).find('input');
                   var name = input.attr('name');
                   parm[name] = input.val();
                };
            });
            if (a=='') {
                alert('请选择接口');
                return false;
            }
            
            url = b+a;
            if (url.indexOf('http') == -1) {
                url = 'http://'+url;
            }
            $.ajax({
                'url': url,
                'data':{'json': JSON.stringify(parm)},
                'dataType': 'json',
                'type' : 'post',
                'success':function(data){
                    if (data.session !== undefined) {
                        $('input[name=sid]').val(data.session.sid);
                        $('input[name=uid]').val(data.session.uid);
                    } 
                    $("#request").val(JsonUti.convertToString(data));
                },
                'beforeSend' : function(){
                    $("#request").val('加载数据中...');
                },
                'error' : function(i, data){
                    $("#request").val(i.responseText);
                }
            });
        });
    });
    
    var JsonUti = {

                //定义换行符

                n: "\\n",

                //定义制表符

                t: "\\t",

                //转换String

                convertToString: function (obj) {

                    return JsonUti.__writeObj(obj, 1);

                },

                //写对象

                __writeObj: function (obj    //对象

                        , level             //层次（基数为1）

                        , isInArray) {       //此对象是否在一个集合内

                    //如果为空，直接输出null

                    if (obj == null) {

                        return "null";

                    }

                    //为普通类型，直接输出值

                    if (obj.constructor == Number || obj.constructor == Date || obj.constructor == String || obj.constructor == Boolean) {

                        var v = obj.toString();

                        var tab = isInArray ? JsonUti.__repeatStr(JsonUti.t, level - 1) : "";

                        if (obj.constructor == String || obj.constructor == Date) {

                            //时间格式化只是单纯输出字符串，而不是Date对象

                            return tab + ("\"" + v + "\"");

                        }

                        else if (obj.constructor == Boolean) {

                            return tab + v.toLowerCase();

                        }

                        else {

                            return tab + (v);

                        }

                    }



                    //写Json对象，缓存字符串

                    var currentObjStrings = [];

                    //遍历属性

                    for (var name in obj) {

                        var temp = [];

                        //格式化Tab

                        var paddingTab = JsonUti.__repeatStr(JsonUti.t, level);

                        temp.push(paddingTab);

                        //写出属性名

                        temp.push(name + " : ");



                        var val = obj[name];

                        if (val == null) {

                            temp.push("null");

                        }

                        else {

                            var c = val.constructor;



                            if (c == Array) { //如果为集合，循环内部对象

                                temp.push(JsonUti.n + paddingTab + "[" + JsonUti.n);

                                var levelUp = level + 2;    //层级+2



                                var tempArrValue = [];      //集合元素相关字符串缓存片段

                                for (var i = 0; i < val.length; i++) {

                                    //递归写对象                         

                                    tempArrValue.push(JsonUti.__writeObj(val[i], levelUp, true));

                                }



                                temp.push(tempArrValue.join("," + JsonUti.n));

                                temp.push(JsonUti.n + paddingTab + "]");

                            }

                            else if (c == Function) {

                                temp.push("[Function]");

                            }

                            else {

                                //递归写对象

                                temp.push(JsonUti.__writeObj(val, level + 1));

                            }

                        }

                        //加入当前对象“属性”字符串

                        currentObjStrings.push(temp.join(""));

                    }

                    return (level > 1 && !isInArray ? JsonUti.n : "")                       //如果Json对象是内部，就要换行格式化

                        + JsonUti.__repeatStr(JsonUti.t, level - 1) + "{" + JsonUti.n     //加层次Tab格式化

                        + currentObjStrings.join("," + JsonUti.n)                       //串联所有属性值

                        + JsonUti.n + JsonUti.__repeatStr(JsonUti.t, level - 1) + "}";   //封闭对象

                },

                __isArray: function (obj) {

                    if (obj) {

                        return obj.constructor == Array;

                    }

                    return false;

                },

                __repeatStr: function (str, times) {

                    var newStr = [];

                    if (times > 0) {

                        for (var i = 0; i < times; i++) {

                            newStr.push(str);

                        }

                    }

                    return newStr.join("");

                }

            };
    </script>
</body>
</html>
EOT;
file_put_contents($htmlfile, $htmlcont);
//生成apitest.html结束

function varToString($input, $indent = '') {
	switch (gettype($input)) {
		case 'string':
			return "'" . str_replace(array("\\", "'"), array("\\\\", "\\'"), $input) . "'";
		case 'array':
			$output = "array(\n";
			foreach ($input as $key => $value) {
				$output .= $indent . "\t" . varToString($key, $indent . "\t") . ' => ' . varToString(
					$value, $indent . "\t");
				$output .= ",\n";
			}
			$output .= $indent . ')';
			return $output;
		case 'boolean':
			return $input ? 'true' : 'false';
		case 'NULL':
			return 'NULL';
		case 'integer':
		case 'double':
		case 'float':
			return "'" . (string) $input . "'";
	}
	return 'NULL';
}

function getData($data, $model)
{
    if (is_array($data)) {
        foreach ($data as $key => $value) {
            $newKey = $key;
            if ($key{0} == '!') {
                $newKey = trim($key, '! ');
                unset($data[$key]);
            }
            $data[$newKey] = getData($value, $model);
        }
    } else {
        if ($data !== '' && $data{0} == '{') {
            $k = trim($data, '{} ');
            if (isset($model[$k])) {
                return getData($model[$k], $model);
            }
            return '';
        } else {
            return $data;
        }
    }


    return $data;
}

function _ARGV($key = '', $default = '') {
    if (empty($GLOBALS['argv']) || !is_array($GLOBALS['argv'])) {
        $GLOBALS['argv'] = array();
    }

    $result = array();
    $last_arg = null;
    foreach ($GLOBALS['argv'] as $val) {
        $pre = substr($val, 0, 2);
        if ($pre == '--') {
            $parts = explode("=", substr($val, 2), 2);
            if (isset($parts[1])) {
                $result[$parts[0]] = $parts[1];
            } else {
                $result[$parts[0]] = true;
            }
        } elseif ($pre{0} == '-') {
            $string = substr($val, 1);
            $len = strlen($string);
            for ($i = 0; $i < $len; $i++) {
                $k = $string[$i];
                $result[$k] = true;
            }
            $last_arg = $k;
        } elseif ($last_arg !== null) {
            $result[$last_arg] = $val;
            $last_arg = null;
        }
    }
    if (empty($key)) {
        return $result;
    }

    if (!isset($result[$key])) {
        $result[$key] = $default;
    }

    return $result[$key];
}
